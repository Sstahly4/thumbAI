generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id             String    @id @default(cuid())
  sessionToken   String    @unique
  userId         String
  expires        DateTime
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt      DateTime  @default(now())
  lastSeenAt     DateTime?
  ipAddress      String?
  userAgent      String?
  location       String?
}

model User {
  id                         String    @id @default(cuid())
  name                       String?
  email                      String?   @unique
  emailVerified              DateTime?
  image                      String?
  password                   String?   // For credentials provider
  accounts                   Account[]
  sessions                   Session[]
  
  // Custom fields from your P1.2.1 task
  stripeCustomerId           String?   @unique
  stripeSubscriptionId       String?   @unique
  stripePriceId              String?
  stripeCurrentPeriodEnd     DateTime?
  stripeSubscriptionStatus   String?   // e.g., "active", "canceled", "incomplete", "past_due"
  planType                   String?   // e.g., "free", "hobby", "creator", "pro"
  credits                    Int?      @default(1) // For free trial/plan

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to PasswordResetToken
  passwordResetTokens PasswordResetToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New Model for Password Resets
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique // The hashed reset token
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
} 